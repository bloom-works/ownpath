# Run when the PR is created, updated with a new commit, or re-opened after closed

name: Pull Request
on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  pr_checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Build Docker container
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ github.repository }}:${{ github.head_ref }}
      # --------
      # COMMAND TEMPLATE
      # Use this to run a job within your main Dockerfile built app container
      #
      # - name: <job name>
      #   run: docker-compose -f docker-compose.yml -f docker-compose.ci.yml run app <terminal command>
      # --------

      # --------
      # COMMON PR CHECKS
      # Add/remove what you do/don't use. Common ones provided below
      # --------

      # TESTS
      - name: Run tests
        run: docker-compose -f docker-compose.yml -f ci/docker-compose.ci.yml run app sh ci/tests.sh

      # SECURITY
      - name: Run security scans
        run: docker-compose -f docker-compose.yml -f ci/docker-compose.ci.yml run app sh ci/security.sh

  playwright:
    name: "Playwright Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Build image (application)
        run: docker build -t test-image:latest .
      - name: Install deps on github action container
        run: npm i --legacy-peer-deps
      - name: Start container (application)
        run: docker run --rm -d --name test-image -p 3000:3000 -v $PWD:/app test-image:latest
      - name: Install playwright
        run: npx playwright install --with-deps
      - name: run tests
        run: export CI=true && npm run test:e2e
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: test-results
